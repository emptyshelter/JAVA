package chat.client;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JTextField;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;
import java.awt.event.ActionEvent;
import javax.swing.JButton;

public class ChatClientFrame extends JFrame {

	private JPanel contentPane;
	private JTextField chatTF;
	private JTextArea displayTA;
	private JPanel panel;
	private JButton btnSend;
	/*********************/
	private ClientClient client;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ChatClientFrame frame = new ChatClientFrame();
					frame.setVisible(true);
					frame.chatTF.requestFocus();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 * @throws Exception 
	 */
	public ChatClientFrame() throws Exception {
		setTitle("ChatClient");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 504, 324);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);
		
		JScrollPane scrollPane = new JScrollPane();
		contentPane.add(scrollPane, BorderLayout.CENTER);
		
		displayTA = new JTextArea();
		displayTA.setEditable(false);
		scrollPane.setViewportView(displayTA);
		
		panel = new JPanel();
		contentPane.add(panel, BorderLayout.SOUTH);
		
		chatTF = new JTextField();
		panel.add(chatTF);
		chatTF.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			}
		});
		chatTF.setColumns(36);
		
		btnSend = new JButton("send");
		btnSend.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			}
		});
		panel.add(btnSend);
		
		client=new ClientClient();
		setTitle(client.getUserId()+" 님 안녕하세요!!");
		
	}
	/*****************************************************
	 클라이언트쪽소켓을 사용하여 서버와 통신을 담당하는 클래스(VO)
    - 서버와연결된 소켓1개를 가지고있는클래스
	- 클라이언트의 정보를 가지고있는 클래스
	- 클라이언트당 1개의객체가생성 
	 ****************************************************/
	public class ClientClient extends Thread{
		private Socket socket;
		private String id;
		private DataInputStream in;
		private DataOutputStream out;
		public ClientClient() throws Exception{
			this.socket=new Socket("192.168.15.31",8888);
			this.id = socket.getLocalAddress()
					.getHostAddress()+
					"["+socket.getLocalPort()+"]";
			this.in=new DataInputStream(socket.getInputStream());
			this.out=new DataOutputStream(socket.getOutputStream());
		}
		public String getUserId() {
			return id;
		}
		public void send(String msg) throws Exception{
			out.writeUTF(msg);
		}
		@Override
		public void run() throws RuntimeException{
			try {
				while (true) {
					
				}
				
			}catch (Exception e) {
				//e.printStackTrace();
				JOptionPane.showMessageDialog(null, e.getMessage());
				System.exit(0);
			}
		}
	}
	
}













