package com.itwill.member;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

/*
Dao(Data Access Object)
 - 멤버들의 데이터를 저장하고있는 파일(테이블)에
   CRUD(Create, Read, Update, Delete) 작업을 할수있는
   단위메쏘드를 가지고있는 클래스

 - MemberService객체의 요청(메쏘드호출)을 받아서 
   Data Access(File, DB)에 관련된 단위기능(CRUD)을
   수행하는 객체
 */
public class MemberDao {
	private File memberFile;
	ArrayList<Member> memberList;
	public MemberDao() throws Exception {
		
	}
	private void init() throws Exception{
		memberFile = new File("members.ser");
		if (!memberFile.exists()) {
			ObjectOutputStream oos = 
					new ObjectOutputStream(
							new FileOutputStream(memberFile));
			oos.writeObject(new ArrayList<Member>());
		}else {
			System.out.println("members.ser 파일이 존재합니다.");
		}
	}
	private ArrayList<Member> readFile() throws Exception {
		ObjectInputStream ois = 
				new ObjectInputStream(
						new FileInputStream(memberFile));
		ArrayList<Member> accountList = 
				(ArrayList<Member>)ois.readObject();
		ois.close();
		return memberList;
	}
	public boolean isDuplicateId(String id) throws Exception{
		boolean isDuplicate=false;
		ArrayList<Member> memberList = this.readFile();
		for (Member member : memberList) {
			if (member.getId().equals(id)) {
				isDuplicate= false;
			}
			else {
				isDuplicate=false;
			}
		}
		return isDuplicate;
	}
	
	/*
	 * Create
	 */
	public void create(Member member) throws Exception {
		
		
	}
	/*
	 * Read
	 */
	public ArrayList<Member> readAll() throws Exception {
		return null;
	}

	
	/*
	 * Read
	 */
	public Member readOne(String id) throws Exception {
		Member findMember = null;

		return findMember;
	}

	/*
	 * Update
	 */
	public void update(Member updateMember) throws Exception {

	}
	/*
	 * Delete
	 */
	public void delete(String id) throws Exception {

	}
}
